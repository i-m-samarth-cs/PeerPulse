generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("technician")
  points        Int       @default(0)
  level         Int       @default(1)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Ticket[]
  responses     TicketResponse[]
  timeEntries   TimeEntry[]
  achievements  Achievement[]
  volunteerSessions VolunteerSession[]
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String
  priority    String   @default("medium")
  status      String   @default("open")
  category    String
  aiScore     Float?
  userId      String
  assignedTo  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  responses   TicketResponse[]
  timeEntries TimeEntry[]
}

model TicketResponse {
  id        String   @id @default(cuid())
  content   String
  ticketId  String
  userId    String
  helpful   Int      @default(0)
  createdAt DateTime @default(now())
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model TimeEntry {
  id            String   @id @default(cuid())
  ticketId      String
  userId        String
  duration      Int
  description   String?
  blockchainTx  String?
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  ticket        Ticket   @relation(fields: [ticketId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  points      Int
  badge       String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model VolunteerSession {
  id          String   @id @default(cuid())
  userId      String
  communityId String
  duration    Int
  impact      String
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}
